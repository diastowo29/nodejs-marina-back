// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model customers {
  id        Int      @id @default(autoincrement())
  name      String?
  origin_id String?  @unique
  phone     String?
  email     String?
  orders    orders[]
}

model orders {
  id                    Int        @id @default(autoincrement())
  createdAt             DateTime   @default(now())
  status                String?
  shop_id               String?
  payment_id            String?
  origin_id             String? @unique
  invoice               String?
  customers             customers? @relation(fields: [customersId], references: [id])
  recp_name             String?
  recp_phone            String?
  recp_addr_full        String?
  recp_addr_district    String?
  recp_addr_city        String?
  recp_addr_province    String?
  recp_addr_country     String?
  recp_addr_postal_code String?
  recp_addr_district_id String?
  recp_addr_city_id     String?
  recp_addr_province_id String?
  recp_addr_geo         String?
  logistic_service      String?
  origin_createdAt      DateTime   @default(now())
  accept_partial        Boolean?
  device                String?
  storeId               Int?
  customersId           Int?
  logisticId            Int?
  total_product_price   Int?
  shipping_price        Int?
  total_amount          Int?
}

model omnichat_user {
  id            Int             @id @default(autoincrement())
  username      String?
  thumbnailUrl  String?
  origin_id     String?         @unique
  createdAt     DateTime        @default(now())
  omnichat      omnichat[]
  omnichat_line omnichat_line[]
}

model omnichat {
  id              Int             @id @default(autoincrement())
  origin_id       String?         @unique
  last_message    String          @db.Text
  last_messageId  String?
  omnichat_user   omnichat_user?  @relation(fields: [omnichat_userId], references: [id])
  messages        omnichat_line[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  storeId         Int?
  omnichat_userId Int?
}

model omnichat_line {
  id              Int            @id @default(autoincrement())
  origin_id       String?        @unique
  omnichat        omnichat?      @relation(fields: [omnichatId], references: [id])
  createdAt       DateTime       @default(now())
  line_text       String         @db.Text
  omnichatId      Int?
  author          String?
  omnichat_user   omnichat_user? @relation(fields: [omnichat_userId], references: [id])
  omnichat_userId Int?
}
